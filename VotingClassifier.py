import pandas as pd
from sklearn.metrics import log_loss
from xgboost import XGBClassifier
from scipy import stats
from scipy.optimize import minimize
from utils.Utils import FilterMatrix
import joblib
import numpy as np

class MalwareClassifier:
    def __init__(self):
        self.XGBoost = XGBClassifier()
        self.XGBoost.load_model('./Models/XGBoost.json')
        self.RFC = joblib.load('./Models/Random Forest Classifier.sav')
        self.LGBM = joblib.load('./Models/Light Graient Boosting.sav')
        self.LogReg = joblib.load('./Models/Logistic Regression.sav')
        self.ANN = joblib.load('./Models/Neural Network.sav')
        self.ModelWeights = [7.24191600e-01, 1.02561619e-02 , 1.0, 2.65552238e-01, 1.87250874e-16]
    
    def GetWeights(self): 
        clfs = list([])
        clfs.append(self.XGBoost)
        clfs.append(self.RFC)
        clfs.append(self.LGBM)
        clfs.append(self.LogReg)
        clfs.append(self.ANN)
        
        Data = pd.read_csv('Feature_Matrix/Feature_Fusion_TEST_Matrix.csv', delimiter =',')
        Data = FilterMatrix(Data)
        X_test = Data.drop('Target',axis = 1).drop('File Name',axis = 1)
        y_test = Data['Target']

        predictions = []
        for clf in clfs:
            predictions.append(clf.predict_proba(X_test))
        
        def log_loss_func(weights):
            final_prediction = 0
            for weight, prediction in zip(weights, predictions):
                    final_prediction += weight*prediction
                    
            return log_loss(y_test, final_prediction)
            
        starting_values = [0.5]*len(predictions)
        
        cons = ({'type':'eq','fun':lambda w: 1-sum(w)})
        bounds = [(0,1)]*len(predictions)
        
        res = minimize(log_loss_func, starting_values, method='SLSQP', bounds=bounds, constraints=cons)
        return res['x']
        
    def predict(self, X):
        return (np.argmax(self.predict_proba(X)) + 1)
    
    def predict_proba(self, X):
        Final_Proba = []
        XGBOOST_Proba = self.XGBoost.predict_proba(X)
        RFC_Proba = self.RFC.predict_proba(X)
        LGBM_Proba = self.LGBM.predict_proba(X)
        LOG_REG_Proba = self.LogReg.predict_proba(X)
        ANN_Proba = self.ANN.predict_proba(X)
        
        XGBOOST_Proba = [self.ModelWeights[0] * itr for itr in XGBOOST_Proba]
        RFC_Proba = [self.ModelWeights[1] * itr for itr in RFC_Proba]
        LGBM_Proba = [self.ModelWeights[2] * itr for itr in LGBM_Proba]
        LOG_REG_Proba = [self.ModelWeights[3] * itr for itr in LOG_REG_Proba]
        ANN_Proba = [self.ModelWeights[4] * itr for itr in ANN_Proba]
            
        for col in range(0, len(XGBOOST_Proba)):
            Proba = []
            Proba.append(XGBOOST_Proba[col])
            Proba.append(RFC_Proba[col])
            Proba.append(LGBM_Proba[col])
            Proba.append(LOG_REG_Proba[col])
            Proba.append(ANN_Proba[col])    
            Final_Proba.append(stats.gmean(Proba))
        return Final_Proba

