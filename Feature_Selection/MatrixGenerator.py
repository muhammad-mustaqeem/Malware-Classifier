import os
import time
import sys
import pandas as pd


class FeatureLoader:
    """
    A class for loading and processing feature data.
    """

    def __init__(self):
        self.classes = {}
        self.header = []

    class HashTable:
        """
        A class for handling hash table operations.
        """

        @staticmethod
        def contains_key(hash_table, key):
            """
            Check if a key is present in the hash table.

            Args:
                hash_table: The hash table to search.
                key: The key to check.

            Returns:
                True if the key is present, False otherwise.
            """
            return key in hash_table

    class FileLoader:
        """
        A class for loading files.
        """

        @staticmethod
        def load_headers(path):
            """
            Load headers from a file.

            Args:
                path: The path to the file containing headers.

            Returns:
                The list of headers.
            """
            headers = []
            with open(path, 'r') as file:
                for line in file:
                    line = line.strip('\n')
                    headers.append(line)
            return headers

    def load_multi_classes(self, path):
        """
        Load multi-classes from a file.

        Args:
            path: The path to the file containing multi-classes.

        Returns:
            The dictionary of multi-classes.
        """
        data = pd.read_csv(path, delimiter=',').values.tolist()
        for count in range(len(data)):
            self.classes[data[count][0]] = data[count][1]
        return self.classes

    def load_one_vs_all_classes(self, path, key):
        """
        Load one-vs-all classes from a file.

        Args:
            path: The path to the file containing one-vs-all classes.
            key: The key to consider as the positive class.

        Returns:
            The dictionary of one-vs-all classes.
        """
        data = pd.read_csv(path, delimiter=',').values.tolist()
        for count in range(len(data)):
            if key == data[count][1]:
                self.classes[data[count][0]] = 1
            else:
                self.classes[data[count][0]] = 0
        return self.classes

    def load_fusion_matrix(self, path_list, label):
        """
        Load the fusion matrix.

        Args:
            path_list: The list of paths to the files.
            label: The label to assign to the fusion matrix.

        Returns:
            The fusion matrix as a DataFrame.
        """
        self.header.append('Target')
        self.header.insert(0, 'File Name')

        df = pd.DataFrame(columns=self.header)
        file_list = os.listdir(path_list[0])
        file_list.sort()
        end = len(file_list)
        total_time = 0

        for count in range(end):
            start = time.time()
            file_name = file_list[count].replace('.csv', '').replace('.txt', '')
            df.loc[count] = [0] * len(self.header)
            df.loc[count].at['File Name'] = file_name

            for path in path_list:
                with open(os.path.join(path, file_list[count]), 'r+') as file:
                    file = list(set(file.readlines()))
                    for line in file:
                        line = line.strip('\n')
                        if self.HashTable.contains_key(self.header, line):
                            df.loc[count].at[line] = 1

            df.loc[count].at['Target'] = label[file_name]
            ending = time.time()
            total_time = total_time + (ending - start)
            avg_time = ((total_time / (count + 1)) * end) / 60
            sys.stdout.flush()
            print(
                f"\rLoaded {(count + 1)} / {end}\t\tCompleted : {round(((count + 1) / end) * 100, 2)}%\t\tETA = {round((avg_time - (total_time / 60)), 2)} min\t\tElapsed = {round((total_time / 60), 2)} min  ",
                end="")
            start = ending = 0

        return df

    def load_data(self, path):
        """
        Load data from a given path.

        Args:
            path: The path to the data files.

        Returns:
            The loaded data as a DataFrame.
        """
        self.header.append('Target')
        self.header.insert(0, 'File Name')

        df = pd.DataFrame(columns=self.header)
        file_list = os.listdir(path)
        file_list.sort()
        end = len(file_list)
        total_time = 0

        for count in range(1000):
            start = time.time()
            file_name = file_list[count].replace('.csv', '')
            df.loc[count] = [0] * len(self.header)
            df.loc[count].at['File Name'] = file_name

            with open(os.path.join(path, file_list[count]), 'r+') as file:
                file = list(set(file.readlines()))
                for line in file:
                    line = line.strip('\n')
                    if self.HashTable.contains_key(self.header, line):
                        df.loc[count].at[line] = 1
            df.loc[count].at['Target'] = self.classes[file_name]
            ending = time.time()
            total_time = total_time + (ending - start)
            avg_time = ((total_time / (count + 1)) * end) / 60
            sys.stdout.flush()
            print(
                f"\rLoaded {(count + 1)} / {end}\t\tCompleted : {round(((count + 1) / end) * 100, 2)}%\t\tETA = {round((avg_time - (total_time / 60)), 2)} min\t\tElapsed = {round((total_time / 60), 2)} min  ",
                end="")
            start = ending = 0
        return df


if __name__ == '__main__':
    feature_loader = FeatureLoader()
    classes = feature_loader.load_multi_classes('testLabels.csv')
    header = feature_loader.FileLoader.load_headers('Final_Features_Header.csv')
    data = feature_loader.load_fusion_matrix(
        ['E:\\New folder\\FYP\\Dataset\\Test Variable Ngrams',
         'E:\\New folder\\FYP\\Dataset\\Test OpCode Ngrams Length - 4',
         'E:\\New folder\\FYP\\Dataset\\Test DLL Ngrams Length - 2',
         'E:\\New folder\\FYP\\Dataset\\Test API Ngrams Length - 2'], classes
    )
    data.to_csv('../Feature_Matrix/Feature_Fussion_TEST_Matrix.csv', index=None, header=True)
