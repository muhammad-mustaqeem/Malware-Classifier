import logging
import pandas as pd
import joblib
from lightgbm import LGBMClassifier
from sklearn.calibration import CalibratedClassifierCV


class LightGradientBoostingModel:
    def __init__(self, n_estimators: int = 100, n_jobs: int = -1, objective: str = 'multiclass', max_depth: int = 4):
        """
        LightGBM classifier wrapper.

        Args:
            n_estimators: Number of boosting iterations.
            n_jobs: Number of parallel threads.
            objective: Objective function.
            max_depth: Maximum depth of a tree.
        """
        self.n_estimators = n_estimators
        self.n_jobs = n_jobs
        self.objective = objective
        self.max_depth = max_depth
        self.lgbm = LGBMClassifier(
            n_estimators=self.n_estimators, max_depth=self.max_depth, objective=self.objective,
            n_jobs=self.n_jobs, verbose=2
        )

    def train(self, x: pd.DataFrame, y: pd.Series) -> LGBMClassifier:
        """
        Train the LightGBM classifier.

        Args:
            x: Training features.
            y: Target values.

        Returns:
            Trained LightGBM classifier.
        """
        logging.info("Training LightGBM classifier...")
        try:
            self.lgbm.fit(x, y)
            logging.info("LightGBM classifier training completed.")
            return self.lgbm
        except Exception as e:
            logging.error("An error occurred during LightGBM classifier training.")
            logging.exception(e)
            raise

    def save_model(self, path: str = '../Models/Light Gradient Boosting.sav') -> None:
        """
        Save the trained LightGBM model to a file.

        Args:
            path: Path to save the model file.
        """
        logging.info(f"Saving LightGBM model to: {path}")
        try:
            joblib.dump(self.lgbm, open(path, 'wb+'))
            logging.info("LightGBM model saved successfully.")
        except Exception as e:
            logging.error("An error occurred while saving the LightGBM model.")
            logging.exception(e)
            raise

    def predict_class(self, x: pd.DataFrame) -> pd.Series:
        """
        Predict the class labels for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class labels.
        """
        logging.info("Predicting class labels...")
        try:
            return self.lgbm.predict(x)
        except Exception as e:
            logging.error("An error occurred during class label prediction.")
            logging.exception(e)
            raise

    def predict_class_proba(self, x: pd.DataFrame) -> pd.DataFrame:
        """
        Predict the class probabilities for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class probabilities.
        """
        logging.info("Predicting class probabilities...")
        try:
            return self.lgbm.predict_proba(x)
        except Exception as e:
            logging.error("An error occurred during class probability prediction.")
            logging.exception(e)
            raise

    def calibrate_classifier(
            self, x: pd.DataFrame, y: pd.Series, cross_validation: int = 5, method: str = 'sigmoid'
    ) -> CalibratedClassifierCV:
        """
        Calibrate the classifier using the provided calibration method.

        Args:
            x: Training features.
            y: Target values.
            cross_validation: Number of cross-validation folds.
            method: Calibration method.

        Returns:
            Calibrated LightGBM classifier.
        """
        logging.info("Calibrating classifier...")
        try:
            calibrate_lgbm = CalibratedClassifierCV(self.lgbm, method=method, cv=cross_validation)
            calibrate_lgbm.fit(x, y)
            self.lgbm = calibrate_lgbm
            logging.info("Classifier calibration completed.")
            return self.lgbm
        except Exception as e:
            logging.error("An error occurred during classifier calibration.")
            logging.exception(e)
            raise


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        Dataset = pd.read_csv('../Feature_Matrix/Feature_Fusion_Matrix.csv', delimiter=',')
        X = Dataset.drop('File Name', axis=1).drop('Target', axis=1)
        y = Dataset['Target']

        clf = LightGradientBoostingModel()
        clf.train(X, y)

        logging.info(clf.predict_class(X))

    except Exception as e:
        logging.error("An error occurred during execution.")
        logging.exception(e)
