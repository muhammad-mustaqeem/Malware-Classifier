import logging
import pandas as pd
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.calibration import CalibratedClassifierCV


class RFC:
    def __init__(self, n_estimators: int = 200, n_jobs: int = -1):
        """
        Random Forest Classifier wrapper.

        Args:
            n_estimators: Number of trees in the forest.
            n_jobs: Number of parallel jobs to run.
        """
        self.n_estimators = n_estimators
        self.n_jobs = n_jobs

        self.rfc = RandomForestClassifier(
            random_state=0, verbose=1, n_estimators=self.n_estimators, n_jobs=self.n_jobs
        )

    def train(self, x: pd.DataFrame, y: pd.Series) -> RandomForestClassifier:
        """
        Train the Random Forest Classifier.

        Args:
            x: Training features.
            y: Target values.

        Returns:
            Trained Random Forest Classifier.
        """
        logging.info("Training Random Forest Classifier...")
        try:
            self.rfc.fit(x, y)
            logging.info("Random Forest Classifier training completed.")
            return self.rfc

        except Exception as e:
            logging.error("An error occurred during Random Forest Classifier training.")
            logging.exception(e)
            raise

    def save_model(self, path: str = '../Models/Random Forest Classifier.sav') -> None:
        """
        Save the trained Random Forest Classifier model to a file.

        Args:
            path: Path to save the model file.
        """
        logging.info(f"Saving Random Forest Classifier model to: {path}")
        try:
            joblib.dump(self.rfc, open(path, 'wb+'))
            logging.info("Random Forest Classifier model saved successfully.")

        except Exception as e:
            logging.error("An error occurred while saving the Random Forest Classifier model.")
            logging.exception(e)
            raise

    def predict_class(self, x: pd.DataFrame) -> pd.Series:
        """
        Predict the class labels for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class labels.
        """
        logging.info("Predicting class labels...")
        try:
            return self.rfc.predict(x)

        except Exception as e:
            logging.error("An error occurred during class label prediction.")
            logging.exception(e)
            raise

    def predict_class_proba(self, x: pd.DataFrame) -> pd.DataFrame:
        """
        Predict the class probabilities for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class probabilities.
        """
        logging.info("Predicting class probabilities...")
        try:
            return self.rfc.predict_proba(x)

        except Exception as e:
            logging.error("An error occurred during class probability prediction.")
            logging.exception(e)
            raise

    def calibrate_classifier(
            self, x: pd.DataFrame, y: pd.Series, cross_validation: int = 5, method: str = 'sigmoid'
    ) -> CalibratedClassifierCV:
        """
        Calibrate the classifier using the provided calibration method.

        Args:
            x: Training features.
            y: Target values.
            cross_validation: Number of cross-validation folds.
            method: Calibration method.

        Returns:
            Calibrated Random Forest Classifier.
        """
        logging.info("Calibrating classifier...")
        try:
            calibrate_rfc = CalibratedClassifierCV(self.rfc, method=method, cv=cross_validation)
            calibrate_rfc.fit(x, y)
            self.rfc = calibrate_rfc
            logging.info("Classifier calibration completed.")
            return self.rfc

        except Exception as e:
            logging.error("An error occurred during classifier calibration.")
            logging.exception(e)
            raise


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        Dataset = pd.read_csv('../Feature_Matrix/Feature_Fusion_Matrix.csv', delimiter=',')
        X = Dataset.drop('File Name', axis=1).drop('Target', axis=1)
        y = Dataset['Target']

        clf = RFC()
        clf.calibrate_classifier(X, y)
        logging.info(clf.predict_class(X))

    except Exception as e:
        logging.error("An error occurred during execution.")
        logging.exception(e)
