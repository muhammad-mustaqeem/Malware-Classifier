import logging
import pandas as pd
import joblib
from sklearn.linear_model import LogisticRegression


class LogisticRegressionModel:
    def __init__(self, max_iter: int = 10000, n_jobs: int = -1):
        """
        Logistic Regression model wrapper.

        Args:
            max_iter: Maximum number of iterations.
            n_jobs: Number of CPU cores to use during training (-1 for all cores).
        """
        self.max_iter = max_iter
        self.n_jobs = n_jobs
        self.LogReg = LogisticRegression(
            verbose=1, max_iter=self.max_iter, n_jobs=self.n_jobs
        )

    def train(self, x: pd.DataFrame, y: pd.Series) -> LogisticRegression:
        """
        Train the Logistic Regression model.

        Args:
            x: Training features.
            y: Target values.

        Returns:
            Trained Logistic Regression model.
        """
        logging.info("Training Logistic Regression model...")
        try:
            self.LogReg.fit(x, y)
            logging.info("Logistic Regression model training completed.")
            return self.LogReg

        except Exception as e:
            logging.error("An error occurred during Logistic Regression model training.")
            logging.exception(e)
            raise

    def save_model(self, path: str = '../Models/Logistic Regression.sav') -> None:
        """
        Save the trained Logistic Regression model to a file.

        Args:
            path: Path to save the model file.
        """
        logging.info(f"Saving Logistic Regression model to: {path}")
        try:
            joblib.dump(self.LogReg, open(path, 'wb+'))
            logging.info("Logistic Regression model saved successfully.")

        except Exception as e:
            logging.error("An error occurred while saving the Logistic Regression model.")
            logging.exception(e)
            raise

    def predict_class(self, x: pd.DataFrame) -> pd.Series:
        """
        Predict the class labels for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class labels.
        """
        logging.info("Predicting class labels...")
        try:
            return self.LogReg.predict(x)

        except Exception as e:
            logging.error("An error occurred during class label prediction.")
            logging.exception(e)
            raise

    def predict_class_proba(self, x: pd.DataFrame) -> pd.DataFrame:
        """
        Predict the class probabilities for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class probabilities.
        """
        logging.info("Predicting class probabilities...")
        try:
            return self.LogReg.predict_proba(x)

        except Exception as e:
            logging.error("An error occurred during class probability prediction.")
            logging.exception(e)
            raise


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        Dataset = pd.read_csv('../Feature_Matrix/Feature_Fusion_Matrix.csv', delimiter=',')
        X = Dataset.drop('File Name', axis=1).drop('Target', axis=1)
        y = Dataset['Target']

        clf = LogisticRegressionModel()
        clf.train(X, y)
        logging.info(clf.predict_class(X))

    except Exception as e:
        logging.error("An error occurred during execution.")
        logging.exception(e)
