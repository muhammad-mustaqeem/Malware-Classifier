import logging
import pandas as pd
import joblib
from sklearn.neural_network import MLPClassifier
from sklearn.calibration import CalibratedClassifierCV


class ANN:
    def __init__(
            self, random_state: int = 1, max_iter: int = 300, verbose: bool = True, alpha: float = 0.0001,
            tol: float = 1e-5
    ):
        """
        Artificial Neural Network (ANN) classifier wrapper.

        Args:
            random_state: Random seed for reproducibility.
            max_iter: Maximum number of iterations.
            verbose: Whether to print progress messages.
            alpha: L2 penalty (regularization term) parameter.
            tol: Tolerance for the optimization.
        """
        self.random_state = random_state
        self.max_iter = max_iter
        self.verbose = verbose
        self.alpha = alpha
        self.tol = tol

        self.ANN = MLPClassifier(
            random_state=self.random_state, max_iter=self.max_iter, verbose=self.verbose, alpha=self.alpha, tol=self.tol
        )

    def train(self, x: pd.DataFrame, y: pd.Series) -> MLPClassifier:
        """
        Train the Artificial Neural Network (ANN) classifier.

        Args:
            x: Training features.
            y: Target values.

        Returns:
            Trained ANN classifier.
        """
        logging.info("Training Artificial Neural Network (ANN) classifier...")
        try:
            self.ANN.fit(x, y)
            logging.info("ANN classifier training completed.")
            return self.ANN
        except Exception as e:
            logging.error("An error occurred during ANN classifier training.")
            logging.exception(e)
            raise

    def save_model(self, path: str = '../Models/Neural Network.sav') -> None:
        """
        Save the trained ANN classifier model to a file.

        Args:
            path: Path to save the model file.
        """
        logging.info(f"Saving ANN classifier model to: {path}")
        try:
            joblib.dump(self.ANN, open(path, 'wb+'))
            logging.info("ANN classifier model saved successfully.")
        except Exception as e:
            logging.error("An error occurred while saving the ANN classifier model.")
            logging.exception(e)
            raise

    def predict_class(self, x: pd.DataFrame) -> pd.Series:
        """
        Predict the class labels for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class labels.
        """
        logging.info("Predicting class labels...")
        try:
            return self.ANN.predict(x)
        except Exception as e:
            logging.error("An error occurred during class label prediction.")
            logging.exception(e)
            raise

    def predict_class_proba(self, x: pd.DataFrame) -> pd.DataFrame:
        """
        Predict the class probabilities for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class probabilities.
        """
        logging.info("Predicting class probabilities...")
        try:
            return self.ANN.predict_proba(x)
        except Exception as e:
            logging.error("An error occurred during class probability prediction.")
            logging.exception(e)
            raise

    def calibrate_classifier(self, x: pd.DataFrame, y: pd.Series, cross_validation: int = 5,
                             method: str = 'sigmoid') -> CalibratedClassifierCV:
        """
        Calibrate the classifier using the provided calibration method.

        Args:
            x: Training features.
            y: Target values.
            cross_validation: Number of cross-validation folds.
            method: Calibration method.

        Returns:
            Calibrated ANN classifier.
        """
        logging.info("Calibrating classifier...")
        try:
            calibrate_ann = CalibratedClassifierCV(self.ANN, method=method, cv=cross_validation)
            calibrate_ann.fit(x, y)
            self.ANN = calibrate_ann
            logging.info("Classifier calibration completed.")
            return self.ANN

        except Exception as e:
            logging.error("An error occurred during classifier calibration.")
            logging.exception(e)
            raise


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        Dataset = pd.read_csv('../Feature_Matrix/Feature_Fusion_Matrix.csv', delimiter=',')
        X = Dataset.drop('File Name', axis=1).drop('Target', axis=1)
        y = Dataset['Target']

        clf = ANN()
        clf.train(X, y)
        logging.info(clf.predict_class(X))
    except Exception as e:
        logging.error("An error occurred during execution.")
        logging.exception(e)
