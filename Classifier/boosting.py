from datetime import datetime
import logging

import numpy as np
import pandas as pd
from xgboost import XGBClassifier


class XGBoost:
    def __init__(
            self, n_jobs: int = -1, base_score: float = 0.5, booster: str = 'gbtree', eta: float = 0.1,
            depth: int = 4, obj: str = 'multi:softprob'
    ):
        """
        XGBoost classifier wrapper.

        Args:
            n_jobs: Number of parallel threads.
            base_score: The initial prediction score of all instances.
            booster: Specify which booster to use: gbtree, gblinear, or dart.
            eta: Learning rate.
            depth: Maximum depth of a tree.
            obj: Objective function.
        """
        self.xgb = XGBClassifier(
            base_score=base_score, booster=booster, learning_rate=eta, max_depth=depth, objective=obj, n_jobs=n_jobs,
            verbosity=2
        )

    def train(self, x: pd.DataFrame, y: pd.Series) -> XGBClassifier:
        """
        Train the XGBoost classifier.

        Args:
            x: Training features.
            y: Target values.

        Returns:
            Trained XGBoost classifier.
        """
        logging.info("Training XGBoost classifier...")
        y_adjusted = np.array(y) - 1

        try:
            self.xgb.fit(x, y_adjusted)
            logging.info("XGBoost classifier training completed.")
            return self.xgb

        except Exception as e:
            logging.error("An error occurred during XGBoost classifier training.")
            logging.exception(e)
            raise

    def save_model(self, path: str = '../Models/XGBoost.model') -> None:
        """
        Save the trained XGBoost model to a file.

        Args:
            path: Path to save the model file.
        """
        logging.info(f"Saving XGBoost model to: {path}")
        try:
            self.xgb.save_model(path)
            logging.info("XGBoost model saved successfully.")

        except Exception as e:
            logging.error("An error occurred while saving the XGBoost model.")
            logging.exception(e)
            raise

    def predict_class(self, x: pd.DataFrame) -> pd.Series:
        """
        Predict the class labels for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class labels.
        """
        logging.info("Predicting class labels...")

        try:
            return self.xgb.predict(x) - 1

        except Exception as e:
            logging.error("An error occurred during class label prediction.")
            logging.exception(e)
            raise

    def predict_class_proba(self, x: pd.DataFrame) -> pd.DataFrame:
        """
        Predict the class probabilities for input samples.

        Args:
            x: Input samples.

        Returns:
            Predicted class probabilities.
        """
        logging.info("Predicting class probabilities...")
        try:
            return self.xgb.predict_proba(x)

        except Exception as e:
            logging.error("An error occurred during class probability prediction.")
            logging.exception(e)
            raise


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    Dataset = pd.read_csv('../Feature_Matrix/Feature_Fusion_Matrix.csv', delimiter=',')
    x = Dataset.drop(['File Name', 'Target'], axis=1)
    y = Dataset['Target']

    clf = XGBoost()
    trained_model = clf.train(x, y)
    model_path = f"../Models/XGBoost_{str(datetime.now().date())}.model"
    clf.save_model(path=model_path)
    logging.info(f"XGBoost model saved to: {model_path}")
