from Disassembler.IDA import IdaPython
from Parser.FeatureExtractor import Parser
import Feature_Selection.MatrixGenerator as MatrixGenerator
import os
import pandas as pd
from VotingClassifier import MalwareClassifier


def PredictInputFile():
    File = os.listdir('./Input/ASM File')
    Classifier = MalwareClassifier()
    disassembler = IdaPython()
    Extractor = Parser()
    disassembler.DisassembleFile()

    for file in File:
        path = os.path.join('.\Input\ASM File', file)
        Opcodes = Extractor.ImportOpcodesToList(path)
        DLL = Extractor.ImportDllToList(path)
        API = Extractor.ImportAPIToList(path)
        file = file.replace('.asm', '')
        VarGram = Extractor.VariableLengthNGrams(Opcodes)
        QuadGram, acc = Extractor.MakeNGrams(4, Opcodes)
        ApiBiGram, acc = Extractor.MakeNGrams(2, DLL)
        DllBiGram, acc = Extractor.MakeNGrams(2, API)

        Header = MatrixGenerator.loadHeaders('./Feature_Selection/Final_Features_Header.csv')
        Data = pd.DataFrame(columns=Header)
        Data.loc[0] = [0] * len(Header)

        Features = []
        Features.append(VarGram)
        Features.append(QuadGram)
        Features.append(ApiBiGram)
        Features.append(DllBiGram)

        for row in range(0, 4):
            Features[row] = list(set(Features[row]))
            for col in range(0, len(Features[row])):
                if Features[row][col] in Header:
                    Data.loc[0].at[Features[row][col]] = int(1)

        return Classifier.predict(Data.values)


if __name__ == '__main__':
    print(PredictInputFile())

